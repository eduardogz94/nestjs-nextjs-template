name: Build and Deploy Storybook
on:
  push:
    branches:
      - main
    paths:
      - 'src/client/stories/**'
      - 'src/client/components/**'
      - 'src/client/pages/**'

  # Allow manual triggering of the workflow
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: 'pages'
  cancel-in-progress: true

jobs:
  build-and-deploy:
    environment:
      name: production
    runs-on: ubuntu-latest
    steps:
      - run: echo "🎉 target evn ${ { vars.NODE_ENV} }"
      - name: Checkout 🛎️
        uses: actions/checkout@main
        with:
          persist-credentials: false
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine packager manager"
            exit 1
          fi
      - name: Setup Node 🔜
        uses: actions/setup-node@main
        with:
          node-version: '16'
          cache: ${{ steps.detect-package-manager.outputs.manager }}
      # - name: Setup Pages
      # uses: actions/configure-pages@v2
      # with:
      # Automatically inject basePath in your Next.js configuration file and disable
      # server side image optimization (https://nextjs.org/docs/api-reference/next/image#unoptimized).
      # You may remove this line if you want to manage the configuration yourself.
      #  static_site_generator: next
      - name: Restore cache 💽
        uses: actions/cache@main
        with:
          path: |
            .next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
      - name: Install dependencies🔧
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      - name: Install dependencies for client 🔧
        run:
          cd src/client && ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
          # // this should be implemented dynamically in the future
      - name: Creating .env  🔑
        run: |
          touch .env.production
          echo JWT_SECRET="secret" >> .env.production
          echo JWT_EXPIRES_IN="10d" >> .env.production
          echo DB_CONNECTION_ALIVE="true" >> .env.production
          echo TYPEORM_ENTITIES=" src/server/entities/**/*.ts" >> .env.production
          echo TYPEORM_MIGRATIONS=" src/server/migrations/*-*.*ts" >> .env.production
          echo TYPEORM_USERNAME="postgres" >> .env.production
          echo TYPEORM_PASSWORD="postgres" >> .env.production
          echo TYPEORM_PORT="5432" >> /.env.production
          echo TYPEORM_HOST="localhost" >> .env.production
          echo TYPEORM_DATABASE="test" >> .env.production
          echo DATABASE_URL="postgres://postgres:postgres@localhost:5432/test" >> .env.production
          echo NODE_ENV="development" >> .env.production
          echo BACKEND_PORT="8080" >> .env.production
          cat .env.production
      - name: Build with Next.js 👨‍🔧
        run: cd src/client && ${{ steps.detect-package-manager.outputs.runner }} build
      - name: Deploy 🚀
        uses: JamesIves/github-pages-deploy-action@main
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: main # The branch the action should deploy to.
          FOLDER: docs # The folder that the build-storybook script generates files.
          CLEAN: true # Automatically remove deleted files from the deploy branch
          TARGET_FOLDER: docs # The folder that we serve our Storybook files from
